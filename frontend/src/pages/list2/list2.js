import { useState, useEffect } from "react";
import axios from "axios";
import { Reset } from "styled-reset";
import { useLocation, useNavigate } from "react-router-dom";
import {
    BtnContainer, BtnContainer2, CIName, CName,
    Container, ContentWrapper, CWName, CWName2, DayBtn,
    Magnifier, ResultInstitutionName, ResultName,
    ResultNameWrapper, ResultWName, ResultWName2, Search,
    SearchBar, Select, SelectContainer, SelectDay,
    Title, VirticalBar, Wrapper,
} from "./liststyle";
import { LogoContainer, LogoImg } from "../recomendation/result/resultstyle";
import Logo from "../../images/3355.png";

export default function ListPage() {
    const navigate = useNavigate();
    const location = useLocation();
    const [selectedAge, setSelectedAge] = useState("");
    const [selectedDays, setSelectedDays] = useState([]);
    const [selectedTime, setSelectedTime] = useState("");
    const [currentPage, setCurrentPage] = useState(1);
    const [data, setData] = useState([]);
    const [totalPages, setTotalPages] = useState(1);
    const [searchQuery, setSearchQuery] = useState(""); // Í≤ÄÏÉâÏñ¥ ÏÉÅÌÉú Ï∂îÍ∞Ä
    const [currentSearch, setCurrentSearch] = useState(""); // ÌòÑÏû¨ Í≤ÄÏÉâÏñ¥ ÌëúÏãúÏö©

    const { source, region, sport } = location.state || {};
    const title = currentSearch
        ? `Í≤ÄÏÉâÏñ¥: ${currentSearch}`
        : (source === "TrendPage" ? region || "ÏßÄÏó≠" : sport || "Ïä§Ìè¨Ï∏†");

    // ÏöîÏùº Î≥ÄÌôò Ìï®Ïàò
    const convertDayToCode = (day) => {
        const dayMap = {
            "Ïõî": "Mon",
            "Ìôî": "Tue",
            "Ïàò": "Wed",
            "Î™©": "Thu",
            "Í∏à": "Fri",
            "ÌÜ†": "Sat",
            "Ïùº": "Sun",
        };
        return dayMap[day];
    };

    // Ïó∞Î†πÎåÄ Î≥ÄÌôò Ìï®Ïàò
    const convertAgeToTarget = (age) => {
        const ageMap = {
            "ÏÑ±Ïù∏": "adult",
            "Ï≤≠ÏÜåÎÖÑ": "teen",
            "Ïú†ÏïÑ/Ïñ¥Î¶∞Ïù¥": "child",
            "ÎÖ∏Ïù∏": "senior",
            "Ïû•Ïï†Ïù∏": "disable",
        };
        return ageMap[age];
    };

    const convertRegion = (region) => {
        const regionMap = {
            ÎåÄÍµ¨: "ÎåÄÍµ¨Í¥ëÏó≠Ïãú",
            Î∂ÄÏÇ∞: "Î∂ÄÏÇ∞Í¥ëÏó≠Ïãú",
            ÏÑúÏö∏: "ÏÑúÏö∏ÌäπÎ≥ÑÏãú",
            Ïö∏ÏÇ∞: "Ïö∏ÏÇ∞Í¥ëÏó≠Ïãú",
            ÎåÄÏ†Ñ: "ÎåÄÏ†ÑÍ¥ëÏó≠Ïãú",
        };
        return regionMap[region] || region;
    };

    // API ÏöîÏ≤≠ Ìï®Ïàò
    const fetchData = async () => {
        try {
            const daysParam = selectedDays.map((day) => convertDayToCode(day)); // ÏöîÏùº Î≥ÄÌôò
            const params = {
                time:
                    selectedTime === "Ïò§Ï†Ñ"
                        ? "morning"
                        : selectedTime === "Ïò§ÌõÑ"
                            ? "afternoon"
                            : undefined,
                target: convertAgeToTarget(selectedAge), // Ïó∞Î†πÎåÄ Î≥ÄÌôò
                page: currentPage,
                limit: 20,
                search: currentSearch || undefined, // Í≤ÄÏÉâÏñ¥ Ï∂îÍ∞Ä
            };

            // ÏßÄÏó≠ Î∞è Ïä§Ìè¨Ï∏† ÌïÑÌÑ∞ Ï∂îÍ∞Ä (Í≤ÄÏÉâÏñ¥Í∞Ä ÏóÜÏùÑ Í≤ΩÏö∞Îßå)
            if (!currentSearch) {
                if (source === "TrendPage") {
                    params.region = convertRegion(title);
                } else {
                    params.sport = title;
                }
            }

            // ÏøºÎ¶¨ Î¨∏ÏûêÏó¥ ÏÉùÏÑ±
            let queryString = Object.entries(params)
                .filter(([_, value]) => value !== undefined && value !== "")
                .map(([key, value]) =>
                    Array.isArray(value)
                        ? value.map((v) => `${key}=${v}`).join("&")
                        : `${key}=${value}`
                )
                .join("&");

            // ÏöîÏùº ÌïÑÌÑ∞ Ï∂îÍ∞Ä
            const daysQueryString = daysParam.map((day) => `days=${day}`).join("&");
            if (daysQueryString) {
                queryString += `&${daysQueryString}`;
            }

            const fullUrl = `http://127.0.0.1:5000/api/programs?${queryString}`;
            console.log("ÏöîÏ≤≠ URL:", fullUrl);

            const response = await axios.get(fullUrl);
            setData(response.data.data || []);
            console.log(response.data.data);

            setTotalPages(Math.ceil((response.data.total || 0) / 20));
        } catch (error) {
            console.error("Îç∞Ïù¥ÌÑ∞ Í∞ÄÏ†∏Ïò§Í∏∞ Ïò§Î•ò:", error);
        }
    };



    // ÏÑ†ÌÉùÎêú ÏöîÏùº ÌÜ†Í∏Ä
    const toggleDay = (day) => {
        setSelectedDays((prev) =>
            prev.includes(day) ? prev.filter((d) => d !== day) : [...prev, day]
        );
    };

    // Í≤ÄÏÉâ Î≤ÑÌäº ÌÅ¥Î¶≠ Ìï∏Îì§Îü¨
    const handleSearch = () => {
        setCurrentSearch(searchQuery);
        setCurrentPage(1); // Í≤ÄÏÉâÏñ¥ Î≥ÄÍ≤Ω Ïãú Ï≤´ ÌéòÏù¥ÏßÄÎ°ú Ïù¥Îèô
    };

    useEffect(() => {
        fetchData();
    }, [selectedAge, selectedDays, selectedTime, currentPage, currentSearch]);

    const handleAgeChange = (e) => setSelectedAge(e.target.value);
    const handleTimeChange = (e) => setSelectedTime(e.target.value);

    return (
        <>
            <Reset />
            <Wrapper>
                <LogoContainer>
                    <LogoImg src={Logo} onClick={() => navigate("/")} />
                </LogoContainer>
                <Container>
                    <Title>{title}</Title>
                    <SearchBar>
                        <Search
                            placeholder="Í≤ÄÏÉâ"
                            value={searchQuery}
                            onChange={(e) => setSearchQuery(e.target.value)} // Í≤ÄÏÉâÏñ¥ ÏóÖÎç∞Ïù¥Ìä∏
                        />
                        <Magnifier onClick={handleSearch}>üîç</Magnifier>
                    </SearchBar>
                    <BtnContainer>
                        <SelectContainer>
                            <Select value={selectedAge} onChange={handleAgeChange}>
                                <option value="">Ïó∞Î†πÎåÄ ÏÑ†ÌÉù</option>
                                <option value="ÏÑ±Ïù∏">ÏÑ±Ïù∏</option>
                                <option value="Ï≤≠ÏÜåÎÖÑ">Ï≤≠ÏÜåÎÖÑ</option>
                                <option value="Ïú†ÏïÑ/Ïñ¥Î¶∞Ïù¥">Ïú†ÏïÑ/Ïñ¥Î¶∞Ïù¥</option>
                                <option value="ÎÖ∏Ïù∏">ÎÖ∏Ïù∏</option>
                                <option value="Ïû•Ïï†Ïù∏">Ïû•Ïï†Ïù∏</option>
                            </Select>
                        </SelectContainer>
                        <BtnContainer2>
                            <SelectContainer>
                                <Select value={selectedTime} onChange={handleTimeChange}>
                                    <option value="">ÏãúÍ∞ÑÎåÄ ÏÑ†ÌÉù</option>
                                    <option value="Ïò§Ï†Ñ">Ïò§Ï†Ñ</option>
                                    <option value="Ïò§ÌõÑ">Ïò§ÌõÑ</option>
                                </Select>
                            </SelectContainer>
                        </BtnContainer2>
                        <SelectDay>
                            {["Ïõî", "Ìôî", "Ïàò", "Î™©", "Í∏à", "ÌÜ†", "Ïùº"].map((day) => (
                                <DayBtn
                                    key={day}
                                    isSelected={selectedDays.includes(day)}
                                    onClick={() => toggleDay(day)}
                                >
                                    {day}
                                </DayBtn>
                            ))}
                        </SelectDay>
                    </BtnContainer>
                    <ResultNameWrapper>
                        <ResultInstitutionName>Í∏∞Í¥ÄÏù¥Î¶Ñ</ResultInstitutionName>
                        <VirticalBar />
                        <ResultName>Ï¢ÖÎ™©</ResultName>
                        <VirticalBar />
                        <ResultName>Í∞úÏÑ§ÏöîÏùº</ResultName>
                        <VirticalBar />
                        <ResultName>Í∞úÏÑ§ÏãúÍ∞Ñ</ResultName>
                        <VirticalBar />
                        <ResultWName2>Ï£ºÏÜå</ResultWName2>
                        <VirticalBar />
                        <ResultWName>ÏõπÏÇ¨Ïù¥Ìä∏</ResultWName>
                    </ResultNameWrapper>
                    {data.map((item, index) => ( // Ïù∏Îç±Ïä§ Ï∂îÍ∞Ä
                        <ContentWrapper key={`${item.CTPRVN_CD}-${index}`}>
                            <CIName>{item.FCLTY_NM}</CIName>
                            <VirticalBar />
                            <CName>{item.SPORT}</CName>
                            <VirticalBar />
                            <CName>{item.PROGRM_ESTBL_WKDAY_NM}</CName>
                            <VirticalBar />
                            <CName>{item.PROGRM_ESTBL_TIZN_VALUE}</CName>
                            <VirticalBar />
                            <CWName2>{item.FCLTY_ADDR}</CWName2>
                            <VirticalBar />
                            <CWName>
                                <a href={item.HMPG_URL} target="_blank" rel="noopener noreferrer">
                                    Î∞©Î¨∏ÌïòÍ∏∞
                                </a>
                            </CWName>
                        </ContentWrapper>
                    ))}
                    <div style={{ display: "flex", justifyContent: "center", margin: "20px 0" }}>
                        {[...Array(totalPages)].map((_, i) => (
                            <button
                                key={i}
                                style={{ margin: "0 5px", fontWeight: currentPage === i + 1 ? "bold" : "normal" }}
                                onClick={() => setCurrentPage(i + 1)}
                            >
                                {i + 1}
                            </button>
                        ))}
                    </div>
                </Container>
            </Wrapper>
        </>
    );
}
